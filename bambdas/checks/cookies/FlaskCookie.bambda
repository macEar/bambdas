id: 9495ddb5-1b8e-480c-b75b-d2d607af1036
name: Flask cookie detected
function: SCAN_CHECK_PASSIVE_PER_REQUEST
location: SCANNER
source: |
    /**
    Identifies requests with Flask application cookies.
    The scan check processes only responses with Set-Cookie value.

    @author macEar (https://github.com/macEar)
    **/

    if (!requestResponse.hasResponse())
	    return AuditResult.auditResult();

    List<Cookie> cookies = requestResponse.response().cookies();
    if (cookies == null || cookies.isEmpty())
	    return AuditResult.auditResult();

    final Pattern FLASK_COOKIE_PATTERN = Pattern.compile("^[A-Za-z0-9_\\-]+\\.[A-Za-z0-9_\\-]+\\.[A-Za-z0-9_\\-]+$");

    List<AuditIssue> issues = new ArrayList<>();

    for (Cookie cookie : cookies) {
	    String cookieName = cookie.name().trim();
        String cookieValue = cookie.value().trim();
    
        if (!FLASK_COOKIE_PATTERN.matcher(cookieValue).matches()) {
    	    continue;
        }
    
        String[] parts = cookieValue.split("\\.");
        if (parts.length != 3) continue;
    
        String payload;
        try {
            payload = new String(Base64.getUrlDecoder().decode(parts[0])).trim();
        } catch (IllegalArgumentException e) {
    	    continue;   
        }
    
        if (payload.startsWith("{") && payload.endsWith("}")) {
    	    AuditIssue issue = AuditIssue.auditIssue(
        	    "Flask application cookie detected", 
        	    String.format("The response sets the cookie <b>%s</b> that is Flask-formatted cookie value containing the following payload: %s<br><br>Try to brute SECRET_KEY using flask-unsign utility:<br><i>flask-unsign --wordlist wordlist.txt --unsign --cookie '%s' --no-literal-eval</i><br><br>You can use the following wordlist:<br>â€¢ https://github.com/Paradoxis/Flask-Unsign-Wordlist/blob/master/flask_unsign_wordlist/wordlists/all.txt", cookieName, payload, cookieValue),
        	    null,
                requestResponse.request().url(),
        	    AuditIssueSeverity.INFORMATION,
        	    AuditIssueConfidence.FIRM,
        	    "Each Flask web application contains a secret key which used to sign session cookies for protection against cookie data tampering. It's very important that an attacker doesn't know the value of this secret key.",
        	    "Specify the value of SECRET_KEY to a long random string.",
        	    AuditIssueSeverity.HIGH,
        	    requestResponse);
            issues.add(issue);
        } 
    }

    return AuditResult.auditResult(issues);